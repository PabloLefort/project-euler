'''
https://projecteuler.net/problem=2

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

import time


# Recursive implementation
def fib(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)


# Memoize implementation
MEMOIZE = {'0': 1, '1': 1}

def fib_mem(n):
    key = str(n)
    try:
        return MEMOIZE[key]
    except KeyError:
        if MEMOIZE.get(str(n-1)) is None:
            keys = MEMOIZE.keys()
            if keys == []:
                memo_max = 0
            else:
                memo_max = max([int(i) for i in MEMOIZE.keys()])
            while memo_max <= n:
                fib_mem(memo_max)
                memo_max += 1
        else:
            MEMOIZE[key] = MEMOIZE[str(n-1)] + MEMOIZE[str(n-2)]
        return MEMOIZE[key]


def fib_even(max, fn):
    result = 0
    for i in range(1, max):
        value = fn(i)
        if value > max:
            break
        if value % 2 == 0:
            result += value
    return result


t1 = time.time()
result = fib_even(4000000, fib)
t2 = time.time()
print('Recursive implementation resolved in {:.3f}ms'.format(t2-t1))

t1 = time.time()
result = fib_even(4000000, fib_mem)
t2 = time.time()
print('Memoize implementation resolved in {:.3f}ms'.format(t2-t1))
